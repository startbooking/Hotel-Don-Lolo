var edita;
var docSopo;
var compras = [];
var docu;
var tipo;
var prov;
var fech;
var plaz;
var venc;
var form;
var come;
var rutaAPI;
var rutaIMP;

(function () {
  document.addEventListener("DOMContentLoaded", async () => {
    rutaAPI = '/fe/restAPI/data';
    rutaIMP = '/fe/imprimir';
    let sesion = JSON.parse(localStorage.getItem("sesion"));

    if (sesion == null) {
      swal({
        title: 'Precaucion',
        text: 'Usuario NO identificado en el Sistema',
        confirmButtonText: "Aceptar",
        type: "warning",
        closeOnConfirm: true,
      }, function () {
        window.location.href = "/";
        return

      })
    }
    let { user } = sesion;
    let { usuario, usuario_id, nombres, apellidos } = user;

    menuUsu = document.querySelector('#nombreUsuario')
    menuUsu.innerHTML = ` ${apellidos} ${nombres} <span class="caret"></span>`

    let ds = document.querySelector('#nuevoDS');
    let paginaDS = document.querySelector('#paginaDS');

    if (ds != null) {
      nuevoDocumento()
    }

    formularioDocumento = document.querySelector('#datosDocSoporte');
    if (formularioDocumento != null) {
      formularioDocumento.addEventListener('submit', btnSubmitDocumento);
    }

    if (paginaDS != null) {
      paginaDS.addEventListener('submit', btnSubmitDS);
    }

    $("#myModalAdicionarProveedor").on("show.bs.modal", async (event) => {
      var button = event.relatedTarget; // Botón que activó el modal
      edita = JSON.parse(button.dataset.edita);
      document.querySelector('#dataRegistrarProveedor').reset();
      document.querySelector('#dataRegistrarProveedor')
        .addEventListener('submit', guardaProveedor);

    });

    $("#myModalProductos").on("show.bs.modal", async (event) => {
      var button = event.relatedTarget; // Botón que activó el modal
      edita = JSON.parse(button.dataset.edita);
      docSopo = JSON.parse(button.dataset.documento);
      document.querySelector('#guardarProductos').reset();
      document.querySelector('#guardarProductos')
        .addEventListener('submit', guardaProducto);
    });

    $("#myModalPagos").on("show.bs.modal", async (event) => {
      var button = event.relatedTarget; // Botón que activó el modal
      edita = JSON.parse(button.dataset.edita);
      document.querySelector('#guardarPagos').reset();
      document.querySelector('#guardarPagos')
        .addEventListener('submit', guardaFormaPago);
    });

    $("#myModalAdicionaItem").on("show.bs.modal", async (event) => {
      var button = event.relatedTarget; // Botón que activó el modal
      id = JSON.parse(button.dataset.edita);
      document.querySelector('#dataRegistraItem').reset();
      document.querySelector('#dataRegistraItem')
        .addEventListener('submit', guardaItemDoc);
    });

    $("#myModalAnulaDS").on("show.bs.modal", async (event) => {
      var button  = event.relatedTarget; // Botón que activó el modal
      let id      = JSON.parse(button.dataset.id);
      let numDocu = JSON.parse(button.dataset.documento);
      let fechaSo = button.dataset.fecha;

      prefijoDS = document.querySelector('#prefijo').value;
      archivo = `documentoSoporte_${prefijoDS}-${numDocu.toString().padStart(5,'0')}.pdf`;
      document.querySelector('#anulaDocumento').reset();

      document.querySelector('#docuSop').value = numDocu
      document.querySelector('#fechaDoc').value = fechaSo
      document.querySelector('#txtIdDS').value = id


      $("#verDocumentoModal").attr(
        "data",`impresos/${archivo}`
      ); 

      document.querySelector('#anulaDocumento')
        .addEventListener('submit', anulaDS);
    });

  });
})();

async function btnSubmitDS(e) {
  e.preventDefault();
  var prefijo = document.querySelector('#prefijo').value ;
  var button = e.submitter;
  let idDoc = JSON.parse(button.dataset.id);
  let estado = JSON.parse(button.dataset.estado);
  let dian = JSON.parse(button.dataset.dian);
  let proveedor = JSON.parse(button.dataset.proveedor);
  let numDocu = JSON.parse(button.dataset.documento);

  if (e.submitter.classList.contains('imprimeDS')) {
    await imprimeDS(idDoc, dian, proveedor,numDocu, prefijo)
  } else if (e.submitter.classList.contains('imprimeNC')) {
    alert(`Imprime NC ${idDoc}`)
  } else if (e.submitter.classList.contains('enviaDS')) {
    await enviaDS(idDoc, dian, proveedor)
  } else if (e.submitter.classList.contains('btnAnulaDoc')) {
    alert(`Anula ${idDoc}`)
  }
}

async function anulaDS(e){
  e.preventDefault();
  let id = document.querySelector('#txtIdDS').value
  let numDocu = document.querySelector('#docuSop').value
  let motivo = document.querySelector('#motivoAnula').value;
  let rechazo = document.querySelector('#rechazo').value;

  if (motivo == '' || rechazo == '') {
    mostrarAlerta('Todos los Datos son Obligatorios', "mensajeAnula");
    return;
  } 
  
  const infoJSON = await creaJSONAnula(id, numDocu)
  const envioJSON = await enviaJSONActivoNT(infoJSON);

  let { IsValid, StatusCode, StatusDescription, StatusMessage } = envioJSON['ResponseDian']['Envelope']['Body']['SendBillSyncResponse']['SendBillSyncResult']
  
  let { string } = envioJSON['ResponseDian']['Envelope']['Body']['SendBillSyncResponse']['SendBillSyncResult']['ErrorMessage']
  
  if(IsValid=="false"){
    const tabla = document.createElement("table");
    const tbody = document.createElement("tbody");
    for (i = 0; i < string.length; i++) {
      const row = document.createElement("tr");
      row.innerHTML += `<td>${string[i]}</td>`;
      tbody.appendChild(row); 
    }

    tabla.append(tbody);

    await  muestraErrorEnvio(tabla, 'mensajeError')
    /* if(regis==0){
      titulo = 'Precuacion';
      texto = 'NO Se Pudo Anular Documento Soporte Actual';
      tipo = 'error'
      mensajeAlerta(titulo, texto, tipo);
      // window.location.href = "docSoporte";      
      return 
    } */
    return 

  }

  const guarda = await guardaAnulaDocumentoSoporte(infoJSON, envioJSON)

  const regis = await anulaDocumentoSoporte(id, numDocu, motivo, rechazo);
  
  /* 

  
  
}

async function  muestraErrorEnvio(cuerpo){
  const imprim = document.querySelector('#mensajeImprime')
  const alerta = document.querySelector("#mensajeError");

  imprim.classList.add('oculto');

  if ((alerta.classList.contains = "oculto")) {
    alerta.classList.remove("oculto");
    alerta.innerHTML = `<h3>  Precaucion <br> Documento NO Procesado, Revise la Informacion Ingresada</h3>`;
    alerta.appendChild(cuerpo); 

    // alerta.innerHTML = cuerpo.innerHTML;
    /* setTimeout(() => {
      alerta.classList.add("oculto");
    }, 3000); */
  }
}

const enviaJSONActivoNT = async(infoJSON) => {
  limpiaVentanaImprimir();
  const infoDS = await infoAPI();
  let { token, rutaFE, documentoSoporte, prefijoDSNC, consecutivoNCDS } = infoDS[0]; 

  /* const SendInvoice = await fetch('https://api.nextpyme.plus/api/ubl2.1/sd-credit-note', {
    method: 'post',
    credentials: "same-origin",
    body: JSON.stringify(infoJSON),
    headers: {
        'Content-Type': 'application/json',        
        'Accept': 'application/json',  
        'Authorization': `Bearer ${token}`      
    }
  });
  const enviado = await SendInvoice.json() */
  // console.log(enviado)
  enviado = {
    "message": "AttachedDocument #NDSN1 generada con éxito",
    "send_email_success": false,
    "send_email_date_time": false,
    "ResponseDian": {
      "Envelope": {
        "Header": {
          "Action": {
            "_attributes": {
              "mustUnderstand": "1"
            },
            "_value": "http://wcf.dian.colombia/IWcfDianCustomerServices/SendBillSyncResponse"
          },
          "Security": {
            "_attributes": {
              "mustUnderstand": "1"
            },
            "Timestamp": {
              "_attributes": {
                "Id": "_0"
              },
              "Created": "2023-10-24T19:17:49.841Z",
              "Expires": "2023-10-24T19:22:49.841Z"
            }
          }
        },
        "Body": {
          "SendBillSyncResponse": {
            "SendBillSyncResult": {
              "ErrorMessage": {
                "string": [
                  "Regla: NSAU04, Rechazo: Base Imponible es distinto a la suma de los valores de las bases imponibles de todas líneas de detalle.",
                  "Regla: NSBG04, Rechazo: CUDS de DS referenciada no existe",
                  "Regla: NSAQ06, Notificación: Porcentaje que aplica superior al 100%",
                  "Regla: NSAX04, Notificación: No se encuentra el grupo TaxSubtotal",
                  "Regla: NSAB19b, Notificación: NIT del Prestador de Servicios no está autorizado por la DIAN"
                ]
              },
              "IsValid": "false",
              "StatusCode": "99",
              "StatusDescription": "Validación contiene errores en campos mandatorios.",
              "StatusMessage": "Documento con errores en campos mandatorios.",
              "XmlBase64Bytes": "",
              "XmlBytes": {
                "_attributes": {
                  "nil": "true"
                }
              },
              "XmlDocumentKey": "31637f2b034b9648f1e9796cd97a8d7826533d4bccd79c73f0791b26ac0ac2940d37d23e4ab5e70ee18411b442518748",
              "XmlFileName": "nds08920024270002300000010"
            }
          }
        }
      }
    },
    "invoicexml": "",
    "zipinvoicexml": "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",
    "unsignedinvoicexml": "",
    "reqfe": "",
    "rptafe": "PHM6RW52ZWxvcGUgeG1sbnM6cz0iaHR0cDovL3d3dy53My5vcmcvMjAwMy8wNS9zb2FwLWVudmVsb3BlIiB4bWxuczphPSJodHRwOi8vd3d3LnczLm9yZy8yMDA1LzA4L2FkZHJlc3NpbmciIHhtbG5zOnU9Imh0dHA6Ly9kb2NzLm9hc2lzLW9wZW4ub3JnL3dzcy8yMDA0LzAxL29hc2lzLTIwMDQwMS13c3Mtd3NzZWN1cml0eS11dGlsaXR5LTEuMC54c2QiPjxzOkhlYWRlcj48YTpBY3Rpb24gczptdXN0VW5kZXJzdGFuZD0iMSI+aHR0cDovL3djZi5kaWFuLmNvbG9tYmlhL0lXY2ZEaWFuQ3VzdG9tZXJTZXJ2aWNlcy9TZW5kQmlsbFN5bmNSZXNwb25zZTwvYTpBY3Rpb24+PG86U2VjdXJpdHkgczptdXN0VW5kZXJzdGFuZD0iMSIgeG1sbnM6bz0iaHR0cDovL2RvY3Mub2FzaXMtb3Blbi5vcmcvd3NzLzIwMDQvMDEvb2FzaXMtMjAwNDAxLXdzcy13c3NlY3VyaXR5LXNlY2V4dC0xLjAueHNkIj48dTpUaW1lc3RhbXAgdTpJZD0iXzAiPjx1OkNyZWF0ZWQ+MjAyMy0xMC0yNFQxOToxNzo0OS44NDFaPC91OkNyZWF0ZWQ+PHU6RXhwaXJlcz4yMDIzLTEwLTI0VDE5OjIyOjQ5Ljg0MVo8L3U6RXhwaXJlcz48L3U6VGltZXN0YW1wPjwvbzpTZWN1cml0eT48L3M6SGVhZGVyPjxzOkJvZHk+PFNlbmRCaWxsU3luY1Jlc3BvbnNlIHhtbG5zPSJodHRwOi8vd2NmLmRpYW4uY29sb21iaWEiPjxTZW5kQmlsbFN5bmNSZXN1bHQgeG1sbnM6Yj0iaHR0cDovL3NjaGVtYXMuZGF0YWNvbnRyYWN0Lm9yZy8yMDA0LzA3L0RpYW5SZXNwb25zZSIgeG1sbnM6aT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiPjxiOkVycm9yTWVzc2FnZSB4bWxuczpjPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tLzIwMDMvMTAvU2VyaWFsaXphdGlvbi9BcnJheXMiPjxjOnN0cmluZz5SZWdsYTogTlNBVTA0LCBSZWNoYXpvOiBCYXNlIEltcG9uaWJsZSBlcyBkaXN0aW50byBhIGxhIHN1bWEgZGUgbG9zIHZhbG9yZXMgZGUgbGFzIGJhc2VzIGltcG9uaWJsZXMgZGUgdG9kYXMgbMOtbmVhcyBkZSBkZXRhbGxlLjwvYzpzdHJpbmc+PGM6c3RyaW5nPlJlZ2xhOiBOU0JHMDQsIFJlY2hhem86IENVRFMgZGUgRFMgcmVmZXJlbmNpYWRhIG5vIGV4aXN0ZTwvYzpzdHJpbmc+PGM6c3RyaW5nPlJlZ2xhOiBOU0FRMDYsIE5vdGlmaWNhY2nDs246IFBvcmNlbnRhamUgcXVlIGFwbGljYSBzdXBlcmlvciBhbCAxMDAlPC9jOnN0cmluZz48YzpzdHJpbmc+UmVnbGE6IE5TQVgwNCwgTm90aWZpY2FjacOzbjogTm8gc2UgZW5jdWVudHJhIGVsIGdydXBvIFRheFN1YnRvdGFsPC9jOnN0cmluZz48YzpzdHJpbmc+UmVnbGE6IE5TQUIxOWIsIE5vdGlmaWNhY2nDs246IE5JVCBkZWwgUHJlc3RhZG9yIGRlIFNlcnZpY2lvcyBubyBlc3TDoSBhdXRvcml6YWRvIHBvciBsYSBESUFOPC9jOnN0cmluZz48L2I6RXJyb3JNZXNzYWdlPjxiOklzVmFsaWQ+ZmFsc2U8L2I6SXNWYWxpZD48YjpTdGF0dXNDb2RlPjk5PC9iOlN0YXR1c0NvZGU+PGI6U3RhdHVzRGVzY3JpcHRpb24+VmFsaWRhY2nDs24gY29udGllbmUgZXJyb3JlcyBlbiBjYW1wb3MgbWFuZGF0b3Jpb3MuPC9iOlN0YXR1c0Rlc2NyaXB0aW9uPjxiOlN0YXR1c01lc3NhZ2U+RG9jdW1lbnRvIGNvbiBlcnJvcmVzIGVuIGNhbXBvcyBtYW5kYXRvcmlvcy48L2I6U3RhdHVzTWVzc2FnZT48YjpYbWxCYXNlNjRCeXRlcz5QRDk0Yld3Z2RtVnljMmx2YmowaU1TNHdJaUJsYm1OdlpHbHVaejBpZFhSbUxUZ2lJSE4wWVc1a1lXeHZibVU5SW01dklqOCtQRUZ3Y0d4cFkyRjBhVzl1VW1WemNHOXVjMlVnZUcxc2JuTTZZMkZqUFNKMWNtNDZiMkZ6YVhNNmJtRnRaWE02YzNCbFkybG1hV05oZEdsdmJqcDFZbXc2YzJOb1pXMWhPbmh6WkRwRGIyMXRiMjVCWjJkeVpXZGhkR1ZEYjIxd2IyNWxiblJ6TFRJaUlIaHRiRzV6T21OaVl6MGlkWEp1T205aGMybHpPbTVoYldWek9uTndaV05wWm1sallYUnBiMjQ2ZFdKc09uTmphR1Z0WVRwNGMyUTZRMjl0Ylc5dVFtRnphV05EYjIxd2IyNWxiblJ6TFRJaUlIaHRiRzV6T21WNGREMGlkWEp1T205aGMybHpPbTVoYldWek9uTndaV05wWm1sallYUnBiMjQ2ZFdKc09uTmphR1Z0WVRwNGMyUTZRMjl0Ylc5dVJYaDBaVzV6YVc5dVEyOXRjRzl1Wlc1MGN5MHlJaUI0Yld4dWN6cHpkSE05SW1ScFlXNDZaMjkyT21Odk9tWmhZM1IxY21GbGJHVmpkSEp2Ym1sallUcFRkSEoxWTNSMWNtVnpMVEl0TVNJZ2VHMXNibk02WkhNOUltaDBkSEE2THk5M2QzY3Vkek11YjNKbkx6SXdNREF2TURrdmVHMXNaSE5wWnlNaUlIaHRiRzV6UFNKMWNtNDZiMkZ6YVhNNmJtRnRaWE02YzNCbFkybG1hV05oZEdsdmJqcDFZbXc2YzJOb1pXMWhPbmh6WkRwQmNIQnNhV05oZEdsdmJsSmxjM0J2Ym5ObExUSWlQZzBLSUNBOFpYaDBPbFZDVEVWNGRHVnVjMmx2Ym5NK0RRb2dJQ0FnUEdWNGREcFZRa3hGZUhSbGJuTnBiMjQrRFFvZ0lDQWdJQ0E4WlhoME9rVjRkR1Z1YzJsdmJrTnZiblJsYm5RK0RRb2dJQ0FnSUNBZ0lEeHpkSE02UkdsaGJrVjRkR1Z1YzJsdmJuTStEUW9nSUNBZ0lDQWdJQ0FnUEhOMGN6cEpiblp2YVdObFUyOTFjbU5sUGcwS0lDQWdJQ0FnSUNBZ0lDQWdQR05pWXpwSlpHVnVkR2xtYVdOaGRHbHZia052WkdVZ2JHbHpkRUZuWlc1amVVbEVQU0kySWlCc2FYTjBRV2RsYm1ONVRtRnRaVDBpVlc1cGRHVmtJRTVoZEdsdmJuTWdSV052Ym05dGFXTWdRMjl0YldsemMybHZiaUJtYjNJZ1JYVnliM0JsSWlCc2FYTjBVMk5vWlcxbFZWSkpQU0oxY200NmIyRnphWE02Ym1GdFpYTTZjM0JsWTJsbWFXTmhkR2x2YmpwMVltdzZZMjlrWld4cGMzUTZaMk02UTI5MWJuUnllVWxrWlc1MGFXWnBZMkYwYVc5dVEyOWtaUzB5TGpFaVBrTlBQQzlqWW1NNlNXUmxiblJwWm1sallYUnBiMjVEYjJSbFBnMEtJQ0FnSUNBZ0lDQWdJRHd2YzNSek9rbHVkbTlwWTJWVGIzVnlZMlUrRFFvZ0lDQWdJQ0FnSUNBZ1BITjBjenBUYjJaMGQyRnlaVkJ5YjNacFpHVnlQZzBLSUNBZ0lDQWdJQ0FnSUNBZ1BITjBjenBRY205MmFXUmxja2xFSUhOamFHVnRaVWxFUFNJMElpQnpZMmhsYldWT1lXMWxQU0l6TVNJZ2MyTm9aVzFsUVdkbGJtTjVTVVE5SWpFNU5TSWdjMk5vWlcxbFFXZGxibU41VG1GdFpUMGlRMDhzSUVSSlFVNGdLRVJwY21WalkybkRzMjRnWkdVZ1NXMXdkV1Z6ZEc5eklIa2dRV1IxWVc1aGN5Qk9ZV05wYjI1aGJHVnpLU0krT0RBd01UazNNalk0UEM5emRITTZVSEp2ZG1sa1pYSkpSRDROQ2lBZ0lDQWdJQ0FnSUNBZ0lEeHpkSE02VTI5bWRIZGhjbVZKUkNCelkyaGxiV1ZCWjJWdVkzbEpSRDBpTVRrMUlpQnpZMmhsYldWQloyVnVZM2xPWVcxbFBTSkRUeXdnUkVsQlRpQW9SR2x5WldOamFjT3piaUJrWlNCSmJYQjFaWE4wYjNNZ2VTQkJaSFZoYm1GeklFNWhZMmx2Ym1Gc1pYTXBJajR1TGk0OEwzTjBjenBUYjJaMGQyRnlaVWxFUGcwS0lDQWdJQ0FnSUNBZ0lEd3ZjM1J6T2xOdlpuUjNZWEpsVUhKdmRtbGtaWEkrRFFvZ0lDQWdJQ0FnSUNBZ1BITjBjenBUYjJaMGQyRnlaVk5sWTNWeWFYUjVRMjlrWlNCelkyaGxiV1ZCWjJWdVkzbEpSRDBpTVRrMUlpQnpZMmhsYldWQloyVnVZM2xPWVcxbFBTSkRUeXdnUkVsQlRpQW9SR2x5WldOamFjT3piaUJrWlNCSmJYQjFaWE4wYjNNZ2VTQkJaSFZoYm1GeklFNWhZMmx2Ym1Gc1pYTXBJajR1TGk0OEwzTjBjenBUYjJaMGQyRnlaVk5sWTNWeWFYUjVRMjlrWlQ0TkNpQWdJQ0FnSUNBZ0lDQThjM1J6T2tGMWRHaHZjbWw2WVhScGIyNVFjbTkyYVdSbGNqNE5DaUFnSUNBZ0lDQWdJQ0FnSUR4emRITTZRWFYwYUc5eWFYcGhkR2x2YmxCeWIzWnBaR1Z5U1VRZ2MyTm9aVzFsU1VROUlqUWlJSE5qYUdWdFpVNWhiV1U5SWpNeElpQnpZMmhsYldWQloyVnVZM2xKUkQwaU1UazFJaUJ6WTJobGJXVkJaMlZ1WTNsT1lXMWxQU0pEVHl3Z1JFbEJUaUFvUkdseVpXTmphY096YmlCa1pTQkpiWEIxWlhOMGIzTWdlU0JCWkhWaGJtRnpJRTVoWTJsdmJtRnNaWE1wSWo0NE1EQXhPVGN5TmpnOEwzTjBjenBCZFhSb2IzSnBlbUYwYVc5dVVISnZkbWxrWlhKSlJENE5DaUFnSUNBZ0lDQWdJQ0E4TDNOMGN6cEJkWFJvYjNKcGVtRjBhVzl1VUhKdmRtbGtaWEkrRFFvZ0lDQWdJQ0FnSUR3dmMzUnpPa1JwWVc1RmVIUmxibk5wYjI1elBnMEtJQ0FnSUNBZ1BDOWxlSFE2UlhoMFpXNXphVzl1UTI5dWRHVnVkRDROQ2lBZ0lDQThMMlY0ZERwVlFreEZlSFJsYm5OcGIyNCtEUW9nSUNBZ1BHVjRkRHBWUWt4RmVIUmxibk5wYjI0K0RRb2dJQ0FnSUNBOFpYaDBPa1Y0ZEdWdWMybHZia052Ym5SbGJuUStQR1J6T2xOcFoyNWhkSFZ5WlNCNGJXeHVjenBrY3owaWFIUjBjRG92TDNkM2R5NTNNeTV2Y21jdk1qQXdNQzh3T1M5NGJXeGtjMmxuSXlJZ1NXUTlJbE5wWjI1aGRIVnlaUzB5TUdFMVlqTXpNaTFtTUdVMExUUTBaV1F0T0RCaFlTMHlNRE0xTmpsaE9XWmhOamdpUGp4a2N6cFRhV2R1WldSSmJtWnZQanhrY3pwRFlXNXZibWxqWVd4cGVtRjBhVzl1VFdWMGFHOWtJRUZzWjI5eWFYUm9iVDBpYUhSMGNEb3ZMM2QzZHk1M015NXZjbWN2VkZJdk1qQXdNUzlTUlVNdGVHMXNMV014Tkc0dE1qQXdNVEF6TVRVaUlDOCtQR1J6T2xOcFoyNWhkSFZ5WlUxbGRHaHZaQ0JCYkdkdmNtbDBhRzA5SW1oMGRIQTZMeTkzZDNjdWR6TXViM0puTHpJd01ERXZNRFF2ZUcxc1pITnBaeTF0YjNKbEkzSnpZUzF6YUdFeU5UWWlJQzgrUEdSek9sSmxabVZ5Wlc1alpTQkpaRDBpVW1WbVpYSmxibU5sTFRkbU9HVTBNemMxTFRJNFpEWXROR00wTWkwNE1qZGlMVGRpT0RWaU9USTFaR1ZtTUNJZ1ZWSkpQU0lpUGp4a2N6cFVjbUZ1YzJadmNtMXpQanhrY3pwVWNtRnVjMlp2Y20wZ1FXeG5iM0pwZEdodFBTSm9kSFJ3T2k4dmQzZDNMbmN6TG05eVp5OHlNREF3THpBNUwzaHRiR1J6YVdjalpXNTJaV3h2Y0dWa0xYTnBaMjVoZEhWeVpTSWdMejQ4TDJSek9sUnlZVzV6Wm05eWJYTStQR1J6T2tScFoyVnpkRTFsZEdodlpDQkJiR2R2Y21sMGFHMDlJbWgwZEhBNkx5OTNkM2N1ZHpNdWIzSm5Mekl3TURFdk1EUXZlRzFzWlc1akkzTm9ZVEkxTmlJZ0x6NDhaSE02UkdsblpYTjBWbUZzZFdVK1oxbHdZVGxDT0ZkSFFXOW5ObXBDU2tWS1FsRm5abFJWWWtzd1ozbEZNamcxVFZWTk1rRkNaRTB5VVQwOEwyUnpPa1JwWjJWemRGWmhiSFZsUGp3dlpITTZVbVZtWlhKbGJtTmxQanhrY3pwU1pXWmxjbVZ1WTJVZ1NXUTlJbEpsWm1WeVpXNWpaVXRsZVVsdVptOGlJRlZTU1QwaUkxTnBaMjVoZEhWeVpTMHlNR0UxWWpNek1pMW1NR1UwTFRRMFpXUXRPREJoWVMweU1ETTFOamxoT1daaE5qZ3RTMlY1U1c1bWJ5SStQR1J6T2tScFoyVnpkRTFsZEdodlpDQkJiR2R2Y21sMGFHMDlJbWgwZEhBNkx5OTNkM2N1ZHpNdWIzSm5Mekl3TURFdk1EUXZlRzFzWlc1akkzTm9ZVEkxTmlJZ0x6NDhaSE02UkdsblpYTjBWbUZzZFdVK2JYVnVkVmgyYVZGSFIwcENZbmxNTWtzd05XNVlXa1JoWkdjeWVFdEtRak5RUkU0MmFUWktiRkZ5UlQwOEwyUnpPa1JwWjJWemRGWmhiSFZsUGp3dlpITTZVbVZtWlhKbGJtTmxQanhrY3pwU1pXWmxjbVZ1WTJVZ1ZIbHdaVDBpYUhSMGNEb3ZMM1Z5YVM1bGRITnBMbTl5Wnk4d01Ua3dNeU5UYVdkdVpXUlFjbTl3WlhKMGFXVnpJaUJWVWtrOUlpTjRiV3hrYzJsbkxWTnBaMjVoZEhWeVpTMHlNR0UxWWpNek1pMW1NR1UwTFRRMFpXUXRPREJoWVMweU1ETTFOamxoT1daaE5qZ3RjMmxuYm1Wa2NISnZjSE1pUGp4a2N6cEVhV2RsYzNSTlpYUm9iMlFnUVd4bmIzSnBkR2h0UFNKb2RIUndPaTh2ZDNkM0xuY3pMbTl5Wnk4eU1EQXhMekEwTDNodGJHVnVZeU56YUdFeU5UWWlJQzgrUEdSek9rUnBaMlZ6ZEZaaGJIVmxQa0pGVm5SRlVVUmtaRnBhVFZWaVprUldRa1JMZFhoYWJWcEZZMnh2Y2xsUVRXVlRNMjFxYjBsbGFUZzlQQzlrY3pwRWFXZGxjM1JXWVd4MVpUNDhMMlJ6T2xKbFptVnlaVzVqWlQ0OEwyUnpPbE5wWjI1bFpFbHVabTgrUEdSek9sTnBaMjVoZEhWeVpWWmhiSFZsSUVsa1BTSlRhV2R1WVhSMWNtVldZV3gxWlMweU1HRTFZak16TWkxbU1HVTBMVFEwWldRdE9EQmhZUzB5TURNMU5qbGhPV1poTmpnaVBrb3pXVFkyU0VSRmJWSTRRbWhCYUU1SE16ZEtSamxQV1U5dmIyWXJVVTkyTVZWNlpISjVUbVZqYUhOMlltWjRZME14ZWl0TGFURkVialU1TlU1b1pUSnhaVlIzVTJZelFqTndXbFYzUXpONFFqQmhkSGxyVEc4MWNFSkxWRXN2TjNCNFVGZzJTRGx1VVVGSllVRXlkVEJCYmtvclRsWlZlbEJ2WlZSNVFsZzNPR3R1TDI1dGJXVmlUUzlKYlRoMGEzSlFkRkpaTUhaMk1WSlVjRnBrVmk5MlpsRlFOSFJ6VTNsSU0wWlhaemhJT0Rnd1dtdDJNamRJZURsclJqZFBlR1J2YVRoU1prTjJZWGRITlRGU2RUbHNaMEZYVm5rM1p6Rm1RVTlHVTB4dU5VWTRUVFpSZG5SWWF5ODNiazlpTWtoWWREQXlialJYU2xOQ1pUbEpTVmxXUjJ0SlVuVjRRVzlHV0VkVVMwRlJjbnBKVkV0MmMwaHRZMVZpY1d4YVVUUk9PSFpJTTB0dmRWUTVjV056UlU0M01rcGhVVTVMT0dsV0swUkZlVlpQVVRocFRGTjBhVmh5T0dWUFMzWTFOR0k0YUVkM1VUMDlQQzlrY3pwVGFXZHVZWFIxY21WV1lXeDFaVDQ4WkhNNlMyVjVTVzVtYnlCSlpEMGlVMmxuYm1GMGRYSmxMVEl3WVRWaU16TXlMV1l3WlRRdE5EUmxaQzA0TUdGaExUSXdNelUyT1dFNVptRTJPQzFMWlhsSmJtWnZJajQ4WkhNNldEVXdPVVJoZEdFK1BHUnpPbGcxTURsRFpYSjBhV1pwWTJGMFpUNU5TVWxJVWtSRFEwSlRlV2RCZDBsQ1FXZEpTMFJ0ZEZaRE5rTk9WM0JxS3paNlFVNUNaMnR4YUd0cFJ6bDNNRUpCVVhOR1FVUkRRbWhxUldWTlFuZEhRMU54UjFOSllqTkVVVVZLUVZKWlVHRlhOVzFpTUVKdVl6SlZkVmt5T1hSTWJVNTJUVk5WZDBsM1dVUldVVkZFUlhoNFFtUllVblpqYld4cldWZFJaMVV6Vm1saU0wcHJZVmMxYUZwSFJXZE5SRVZuVWpGT1JrMVJkM2REWjFsRVZsRlJURVYzVGxGVE1HdDRSRVJCUzBKblRsWkNRVzlVUVRCa1ZGSlVSVlZOUWtsSFFURlZSVUo0VFV4UmJUbHVZak5TYUVsRlVYVlJlVFI0UTNwQlNrSm5UbFpDUVZsVVFXdE9VRTFDTkZoRVZFbDVUVlJGZVUxNlNYcE5la1V3VGpGdldFUlVTVEJOVkVWNVRXcEplazE2UlRCT2JHOTNaMmRGVmsxU01IZEhkMWxFVmxGUlNrUkNVa1JSVmtwVFVsWktRa2xEUVROSlEwMW5UbXROWjB4VFFURk9SRVZxVFVORlIwRXhWVVZFVVhkaFVtdFdVVk5wUWtoVk1GVm5VVEIzWjA1NlkyZE9lVUV3VGtOQ1VGSnBRVE5OUkVWNFJrUkJVMEpuVGxaQ1FXZE5RekJLVUZJd09WVlJVMEpGVEd0TmRVMVNVWGRGWjFsRVZsRlJTRVJCZEVOVU1HUlFWa1ZGWjFKRE5VUk1ha1ZNVFVGclIwRXhWVVZDYUUxRFVUQTRlRTk2UVRWQ1owNVdRa0ZOVFUxc1ZYVlJVelZHVEdsQ1JWTldTa1pSTUU1S1ZEQTBaMUpGVldkVFZURlJWbFZXVkZaRk9WUkpSbXRuVVZWU1ZsRlZOVUpWZVVKUFVWVk9TbFF3TlVKVVJWWlVUVkYzZDBObldVUldVVkZ3UkVGT1QxTldVWGhGZWtGU1FtZE9Wa0pCVlZSRGFtZDNUVVJGTlU1NlNUSlBSRkY0UjJwQldVSm5UbFpDUVhOTlJWVlNTbFZyVmtSUk1HeFFWR2xDU0ZKVk5VWlZhMFpOVFZKdmQwZEJXVXRMZDFsQ1FrRkhhMXBuUlVSQlozZExUMFJCZDAxVWF6Tk5hbGswVGtSRFEwRlRTWGRFVVZsS1MyOWFTV2gyWTA1QlVVVkNRbEZCUkdkblJWQkJSRU5EUVZGdlEyZG5SVUpCU2tsS1ZsWnlOVm92WjJWeFJtNXhXbFpQZGtGRFNrUk9ha3d4V2tGQ1QxWjRZaXM1TVdndmFHc3ZZbmh6TVZjMVIyZFJMMkV5U2pGcVZIQlhjM2xqZEZkNlZrbE9NVUUzY1RkSGRscDBNR3B2YVROV2RUSTBiRWs1V1RFM1ltTlFNSFkwU0hCSGMzTkpNbWwyTlhOemNsQTNhbVpVTlcxWVFXUmhWbGxJVWs5aFIxQmxXVWxNV0hreU4zTlFaRXcyTm1aR1JFSkdPVTVuVjNwQk9EQmFkekUwUlVOUGJtSjRXakpqV0dWTlFVSkdja3d3Y1U5ak9YWXhZVmRLU25Kd2MzRlNUbUY2UXpoNE4zVkNhV2NyY1hKb2NIRjNVRVlyTVhaUlVWTm9NbkZRZUhCVmNXMWhVbWxGVlVSdFowMWlTRzE2V1ZnMVZrSk1TREZ0V2xCclNUbFBWRXM0WjFOdVJrMW9TVWRST1ZaVFJ6TllNR2x4TUVSeVRuTk9NelJ5VTJaUlRrUnFkMEpOYW5NelJtdzRiR2xJYjNsVFRGTXJWRFZPU2tveWFYbFhXWFJuTWpObU1scE1SbGRzVG5CMGVIbHNWM1Z6UTBGM1JVRkJZVTlEUVdsQmQyZG5TV05OUVhkSFFURlZaRVYzUlVJdmQxRkRUVUZCZDBoM1dVUldVakJxUWtKbmQwWnZRVlZSWW5wVlQxaHBOR2MyVFZoSFoybGhjV0puUlVGbmEzUXlTbXQzWVVGWlNVdDNXVUpDVVZWSVFWRkZSVmhFUW1GTlJFbEhRME56UjBGUlZVWkNla0ZEYUdsYWIyUklVbmRqZW05MlRESk9iR051VW5wTmFUVnVZekpWZFZreU9YUk1iVTUyVERCT1FsZ3hUbFpSYWtGNFRHMU9lV1JFUVd0Q1oyZHlRbWRGUmtKUlkzZEJXVmxaWVVoU01HTklUVFpNZVRsMldUTk9kMDFwTlc1ak1sVjFXVEk1ZEV4dFRuWk5SM2RIUVRGVlpFVlJVbXhOUjA5Q1JtMDFhR1ZYYkdsYVdGSjZZMGR3UVdGSE9UQmlWMFp3WWtNMWFtSXlNa2RUVjJnd1pFaENlazlwT0haYU0wNXNURzFPZG1KVE5XcGllVGxyWWpKT01XSlhWblZrUnpsNlRESk9iR051VW5CYWJXeHFXVmRPY0dJeU5XeGplVGxvV1ROS2JGcEhiREJaVjA1d1lqSTBkazFVV1hSU1ZVNUZURlJCZDAxVE5YZGFSMWwzWjFsTlIwRXhWV1JKUVZJNFRVaHZkMlZCV1V4TGQxbENRa0ZIUWpoNVFVSkNRVEIzWVZSQ2JrSm5aM0pDWjBWR1FsRmpRMEZTV21KaFNGSXdZMGhOTmt4NU9XNWpNbFYxV1RJNWRFeHRUblpNTWxKMldUTldkRnBYTlRCaU0wMTJXVEpHYzJGWFVtaGFRemxGVlVWTmRsSkhWbXBpUjBaNVdWZE9jR0l5TldaYVIxWm1WVWhLYUZrelVuQlpNa1o2V0RKU2JGZ3dUbXhqYmxKd1dtMXNhbGxYVG5CaU1qVm1WbXBGTUV4dVFtdGFha0Z1UW1kT1ZraFRWVVZKUkVGbFFtZG5ja0puUlVaQ1VXTkVRV2RaU1V0M1dVSkNVVlZJUVhkUlIwTkRjMGRCVVZWR1FuZE5RazFFVlVkQk1WVmtTSGRSZFUxRGQzZExjVUZ2YjBOaFIwcEhhREJrU0VKNlQyazRkbGt6U25OTmFUVnVZekpWZFZreU9YUk1iVTUyVERCT1FsZ3hUbFpSYWtGNFRHMU9lV0pFUVdSQ1owNVdTRkUwUlVablVWVnhhRzltY25KRVFXUlJXRk53T0dOaWQyNW9RM0E1Vm5aVFZHZDNSR2RaUkZaU01GQkJVVWd2UWtGUlJFRm5WSGROUVRCSFExTnhSMU5KWWpORVVVVkNRM2RWUVVFMFNVTkJVVU5YVkZWeWFXNDVObVkyWWpGTmVHOUhSSGs0VkRCdlFXRTRjMkZPYTBWVVRtMTBlakV5Y2taUlEyd3ZVM05CT1RoalJrYzVjemxGUlVwVVlVRjRTbmxXV1VONFRFMVRaekZVU1RKeFdGQXhaa2d6UXl0V2FEVnNUMmgwWkdjclIwTlBTamRZUkZGa1FrSkxZMmc0TjNKV1dYQlpiVGxPTW1KTE5GbHRTelJPWVhwNGJuQm5jRnBoVkRKbmRtZFpkbVppTjJSa1dWVklaRTk1Tm1ZMWVuQmlUMEozYkdsMVIzaFRSMWhJUzFKUFptMTVXQ3QwUW5GMGEyTTNTRVpGT1VwME1VSktRa0ZSV0VjNE1Fa3pOQ3RTT1VOalJYUXhXbGxMU2paYWFVSlNTRFJtWTJ4MmExY3lWa3d2VURKcmRWVnhTSE5DTUdFMEsySnRRVUl4WVVGVEx6UjBjV2RPY2tWbU4wa3pNRGxKWlZaWGIyTmpVVTVCYzBGTE5YaDFjRk5SYjFGRlIwRnRkV1JpYkcxT1QxbDBiemxFWm01cWRFVllTWFpoUkRGVFVHazFhekF4UkZnM1Z6TTRhazEzV1VWdU9XeGlkakkzZERCTVozWlFNWGxRTld4bVdXcE5WV040ZERkd05ucFdhRWhwYzBabE9FUnBWRGc1YldaMmVGSkNlSGR2WTJkTGFWVkJaVU0zU1hWSFEzUk9jVFZFWWpkMGFXbERRMXBYWTA1SFpHbDFXRVpLY1ROdk5IbElTMXBRT1hwdlR5OVlXbEZIV2xwRFdTdEZaRzVYY0V4d1VWQkpZa1IzZVhacVl6UkRjRUl3UW5CQlZXbERSakUwYUdJelpGZHFVWFU1Y0VaMFNEaDNVRUZsVGtWTkwwaEpMMHAxUWl0eFoxb3pWRFl5UXpSRlltdFhkbVptY1VRdmNrZENWbkJFTUdGQldIUllkRGRwTlhCek1tMUhWM2hwVmt4TVVHUTRVbXBPTkdGSGJVVnlWRlZaTkVGelYwOVBSRlZXV1RsTFMzVkdRMFJYT0ZSaFQwRmlUWFJqYVZWV1NqRkdhSGMwUjBwSVZVazNNR3BqZDIxaFlXYzRSbkZRTDI1ME1WVmhXWEF6Y0RseFVGaHphM1F3Vlc1M1lrRXhiREp0TUhwQmFqTldZVkoyUkhKbWNGRjJUamxwTWxWbVFtaDBRMkpaZUZsb09WZE1aejA5UEM5a2N6cFlOVEE1UTJWeWRHbG1hV05oZEdVK1BDOWtjenBZTlRBNVJHRjBZVDQ4WkhNNlMyVjVWbUZzZFdVK1BHUnpPbEpUUVV0bGVWWmhiSFZsUGp4a2N6cE5iMlIxYkhWelBtdG5iRlpYZG14dUswSTJiMWRsY0d4Vk5qaEJTV3ROTWsxMlZtdEJSVFZZUm5ZM00xZElLMGRVT1haSGVsWmlhMkZDUkRseVdXNVhUazlzWVhwS2VURmlUbFZuTTFWRWRYSnpZVGx0TTFOUGFVeGtWemRpYVZWcU1XcFlkSFIzTDFNdloyVnJZWGwzYW1GTEwyMTVlWE12ZFU0NVVHMWFZMEl4Y0ZablpFVTFiMWs1TldkbmRHWk1ZblYzT1RCMmNuQTRWVTFGV0RBeVFtSk5SSHBTYmtSWVoxRkpObVIyUm01YWVHUTBkMEZGVjNOMlUyODFlakl2Vm5CWmEyMTFiWGx3UlRGeVRVeDZTSFUwUjB0RU5uRjFSMjF5UVRoWU4xYzVRa0pMU0dGdkwwZHNVM0ZhY0VkSlVsRlBZVUY0YzJWaVRtaG1iRlZGYzJaWFdtc3JVV293TlUxeWVVSkxZMVY1UldkYVJERldTV0prWmxOTGNsRlBjekozTTJacGRFbzVRVEJQVUVGRmVVOTZZMWRZZVZkSlpXcEtTWFJNTlZCck1HdHVZVXhLV21reVJHSmtMMXByYzFaaFZUSnRNMGhMVm1FMmR6MDlQQzlrY3pwTmIyUjFiSFZ6UGp4a2N6cEZlSEJ2Ym1WdWRENUJVVUZDUEM5a2N6cEZlSEJ2Ym1WdWRENDhMMlJ6T2xKVFFVdGxlVlpoYkhWbFBqd3ZaSE02UzJWNVZtRnNkV1UrUEM5a2N6cExaWGxKYm1adlBqeGtjenBQWW1wbFkzUWdTV1E5SWxoaFpHVnpUMkpxWldOMFNXUXRNemMxTWpGa016UXRPR0U0TkMwMFkyUm1MVGxtTlRZdFpqQTFZamN4T0dRMU1tRTBJajQ4ZUdGa1pYTTZVWFZoYkdsbWVXbHVaMUJ5YjNCbGNuUnBaWE1nZUcxc2JuTTZlR0ZrWlhNOUltaDBkSEE2THk5MWNta3VaWFJ6YVM1dmNtY3ZNREU1TURNdmRqRXVNeTR5SXlJZ1NXUTlJbEYxWVd4cFpubHBibWRRY205d1pYSjBhV1Z6TFdVMFlqYzFZV1kyTFdaaVlUVXROR05rTUMwNU1tTXdMV000WXpKaE4yUm1abVZqWWlJZ1ZHRnlaMlYwUFNJalUybG5ibUYwZFhKbExUSXdZVFZpTXpNeUxXWXdaVFF0TkRSbFpDMDRNR0ZoTFRJd016VTJPV0U1Wm1FMk9DSStQSGhoWkdWek9sTnBaMjVsWkZCeWIzQmxjblJwWlhNZ1NXUTlJbmh0YkdSemFXY3RVMmxuYm1GMGRYSmxMVEl3WVRWaU16TXlMV1l3WlRRdE5EUmxaQzA0TUdGaExUSXdNelUyT1dFNVptRTJPQzF6YVdkdVpXUndjbTl3Y3lJK1BIaGhaR1Z6T2xOcFoyNWxaRk5wWjI1aGRIVnlaVkJ5YjNCbGNuUnBaWE0rUEhoaFpHVnpPbE5wWjI1cGJtZFVhVzFsUGpJd01qTXRNVEF0TWpSVU1UUTZNVGM2TkRrck1EQTZNREE4TDNoaFpHVnpPbE5wWjI1cGJtZFVhVzFsUGp4NFlXUmxjenBUYVdkdWFXNW5RMlZ5ZEdsbWFXTmhkR1UrUEhoaFpHVnpPa05sY25RK1BIaGhaR1Z6T2tObGNuUkVhV2RsYzNRK1BHUnpPa1JwWjJWemRFMWxkR2h2WkNCQmJHZHZjbWwwYUcwOUltaDBkSEE2THk5M2QzY3Vkek11YjNKbkx6SXdNREV2TURRdmVHMXNaVzVqSTNOb1lUSTFOaUlnTHo0OFpITTZSR2xuWlhOMFZtRnNkV1UrZVROdVJtSkNSMEl4WjBacE9UaE1jV3BvTldnelNYUmFOakI1YzBGRlNDdHZObHBRU1hodU5HVm5VVDA4TDJSek9rUnBaMlZ6ZEZaaGJIVmxQand2ZUdGa1pYTTZRMlZ5ZEVScFoyVnpkRDQ4ZUdGa1pYTTZTWE56ZFdWeVUyVnlhV0ZzUGp4a2N6cFlOVEE1U1hOemRXVnlUbUZ0WlQ1RFBVTlBMQ0JNUFVKdloyOTBZU0JFTGtNdUxDQlBQVWRUUlN3Z1QxVTlVRXRKTENCRFRqMUJkWFJ2Y21sa1lXUWdVM1ZpYjNKa2FXNWhaR0VnTURFZ1IxTkZMQ0JGUFdsdVptOUFaM05sTG1OdmJTNWpiend2WkhNNldEVXdPVWx6YzNWbGNrNWhiV1UrUEdSek9sZzFNRGxUWlhKcFlXeE9kVzFpWlhJK05qZ3dPVE13TmpBMU5EUXpNRGc0T1RNMU1UVTBPVGs4TDJSek9sZzFNRGxUWlhKcFlXeE9kVzFpWlhJK1BDOTRZV1JsY3pwSmMzTjFaWEpUWlhKcFlXdytQQzk0WVdSbGN6cERaWEowUGp3dmVHRmtaWE02VTJsbmJtbHVaME5sY25ScFptbGpZWFJsUGp4NFlXUmxjenBUYVdkdVlYUjFjbVZRYjJ4cFkzbEpaR1Z1ZEdsbWFXVnlQang0WVdSbGN6cFRhV2R1WVhSMWNtVlFiMnhwWTNsSlpENDhlR0ZrWlhNNlUybG5VRzlzYVdONVNXUStQSGhoWkdWek9rbGtaVzUwYVdacFpYSSthSFIwY0hNNkx5OW1ZV04wZFhKaFpXeGxZM1J5YjI1cFkyRXVaR2xoYmk1bmIzWXVZMjh2Y0c5c2FYUnBZMkZrWldacGNtMWhMM1l5TDNCdmJHbDBhV05oWkdWbWFYSnRZWFl5TG5Ca1pqd3ZlR0ZrWlhNNlNXUmxiblJwWm1sbGNqNDhlR0ZrWlhNNlJHVnpZM0pwY0hScGIyNGdMejQ4TDNoaFpHVnpPbE5wWjFCdmJHbGplVWxrUGp4NFlXUmxjenBUYVdkUWIyeHBZM2xJWVhOb1BqeGtjenBFYVdkbGMzUk5aWFJvYjJRZ1FXeG5iM0pwZEdodFBTSm9kSFJ3T2k4dmQzZDNMbmN6TG05eVp5OHlNREF4THpBMEwzaHRiR1Z1WXlOemFHRXlOVFlpSUM4K1BHUnpPa1JwWjJWemRGWmhiSFZsUG1STmIwMTJkR05ITldGSmVtZFpiekIwU1hOVFVXVldTa0pFYmxWdVpsTlBaa0p3ZUZoeWJXOXlNRms5UEM5a2N6cEVhV2RsYzNSV1lXeDFaVDQ4TDNoaFpHVnpPbE5wWjFCdmJHbGplVWhoYzJnK1BDOTRZV1JsY3pwVGFXZHVZWFIxY21WUWIyeHBZM2xKWkQ0OEwzaGhaR1Z6T2xOcFoyNWhkSFZ5WlZCdmJHbGplVWxrWlc1MGFXWnBaWEkrUEhoaFpHVnpPbE5wWjI1bGNsSnZiR1UrUEhoaFpHVnpPa05zWVdsdFpXUlNiMnhsY3o0OGVHRmtaWE02UTJ4aGFXMWxaRkp2YkdVK2MzVndjR3hwWlhJOEwzaGhaR1Z6T2tOc1lXbHRaV1JTYjJ4bFBqd3ZlR0ZrWlhNNlEyeGhhVzFsWkZKdmJHVnpQand2ZUdGa1pYTTZVMmxuYm1WeVVtOXNaVDQ4TDNoaFpHVnpPbE5wWjI1bFpGTnBaMjVoZEhWeVpWQnliM0JsY25ScFpYTStQSGhoWkdWek9sTnBaMjVsWkVSaGRHRlBZbXBsWTNSUWNtOXdaWEowYVdWelBqeDRZV1JsY3pwRVlYUmhUMkpxWldOMFJtOXliV0YwSUU5aWFtVmpkRkpsWm1WeVpXNWpaVDBpSTFKbFptVnlaVzVqWlMwM1pqaGxORE0zTlMweU9HUTJMVFJqTkRJdE9ESTNZaTAzWWpnMVlqa3lOV1JsWmpBaVBqeDRZV1JsY3pwTmFXMWxWSGx3WlQ1MFpYaDBMM2h0YkR3dmVHRmtaWE02VFdsdFpWUjVjR1UrUEhoaFpHVnpPa1Z1WTI5a2FXNW5QbFZVUmkwNFBDOTRZV1JsY3pwRmJtTnZaR2x1Wno0OEwzaGhaR1Z6T2tSaGRHRlBZbXBsWTNSR2IzSnRZWFErUEM5NFlXUmxjenBUYVdkdVpXUkVZWFJoVDJKcVpXTjBVSEp2Y0dWeWRHbGxjejQ4TDNoaFpHVnpPbE5wWjI1bFpGQnliM0JsY25ScFpYTStQQzk0WVdSbGN6cFJkV0ZzYVdaNWFXNW5VSEp2Y0dWeWRHbGxjejQ4TDJSek9rOWlhbVZqZEQ0OEwyUnpPbE5wWjI1aGRIVnlaVDQ4TDJWNGREcEZlSFJsYm5OcGIyNURiMjUwWlc1MFBnMEtJQ0FnSUR3dlpYaDBPbFZDVEVWNGRHVnVjMmx2Ymo0TkNpQWdQQzlsZUhRNlZVSk1SWGgwWlc1emFXOXVjejROQ2lBZ1BHTmlZenBWUWt4V1pYSnphVzl1U1VRK1ZVSk1JREl1TVR3dlkySmpPbFZDVEZabGNuTnBiMjVKUkQ0TkNpQWdQR05pWXpwRGRYTjBiMjFwZW1GMGFXOXVTVVErTVR3dlkySmpPa04xYzNSdmJXbDZZWFJwYjI1SlJENE5DaUFnUEdOaVl6cFFjbTltYVd4bFNVUStSRWxCVGlBeUxqRThMMk5pWXpwUWNtOW1hV3hsU1VRK0RRb2dJRHhqWW1NNlVISnZabWxzWlVWNFpXTjFkR2x2YmtsRVBqRThMMk5pWXpwUWNtOW1hV3hsUlhobFkzVjBhVzl1U1VRK0RRb2dJRHhqWW1NNlNVUStNVEl3TURFeU1EVThMMk5pWXpwSlJENE5DaUFnUEdOaVl6cFZWVWxFSUhOamFHVnRaVTVoYldVOUlrTlZSRVV0VTBoQk16ZzBJajVoTmpGa056WXhZV0k1WlRjd01UVmtPRFV6WWpJeE5Ea3pZalJqTXpBMlptWXhPVFV4Wmpaa04yRm1Oak5rWldJNVpUWTVNR1JoTkdZMFlXTXhZamN5WXpsak5qVTJPR013WVRKallUQXdNRGxpWlRJNVpqWm1PRFZqWmpZM1pHRThMMk5pWXpwVlZVbEVQZzBLSUNBOFkySmpPa2x6YzNWbFJHRjBaVDR5TURJekxURXdMVEkwUEM5alltTTZTWE56ZFdWRVlYUmxQZzBLSUNBOFkySmpPa2x6YzNWbFZHbHRaVDR4TkRveE56bzBPUzB3TlRvd01Ed3ZZMkpqT2tsemMzVmxWR2x0WlQ0TkNpQWdQR05oWXpwVFpXNWtaWEpRWVhKMGVUNE5DaUFnSUNBOFkyRmpPbEJoY25SNVZHRjRVMk5vWlcxbFBnMEtJQ0FnSUNBZ1BHTmlZenBTWldkcGMzUnlZWFJwYjI1T1lXMWxQbFZ1YVdSaFpDQkZjM0JsWTJsaGJDQkVhWEpsWTJOcHc3TnVJR1JsSUVsdGNIVmxjM1J2Y3lCNUlFRmtkV0Z1WVhNZ1RtRmphVzl1WVd4bGN6d3ZZMkpqT2xKbFoybHpkSEpoZEdsdmJrNWhiV1UrRFFvZ0lDQWdJQ0E4WTJKak9rTnZiWEJoYm5sSlJDQnpZMmhsYldWSlJEMGlOQ0lnYzJOb1pXMWxUbUZ0WlQwaU16RWlQamd3TURFNU56STJPRHd2WTJKak9rTnZiWEJoYm5sSlJENE5DaUFnSUNBZ0lEeGpZV002VkdGNFUyTm9aVzFsUGcwS0lDQWdJQ0FnSUNBOFkySmpPa2xFUGpBeFBDOWpZbU02U1VRK0RRb2dJQ0FnSUNBZ0lEeGpZbU02VG1GdFpUNUpWa0U4TDJOaVl6cE9ZVzFsUGcwS0lDQWdJQ0FnUEM5allXTTZWR0Y0VTJOb1pXMWxQZzBLSUNBZ0lEd3ZZMkZqT2xCaGNuUjVWR0Y0VTJOb1pXMWxQZzBLSUNBOEwyTmhZenBUWlc1a1pYSlFZWEowZVQ0TkNpQWdQR05oWXpwU1pXTmxhWFpsY2xCaGNuUjVQZzBLSUNBZ0lEeGpZV002VUdGeWRIbFVZWGhUWTJobGJXVStEUW9nSUNBZ0lDQThZMkpqT2xKbFoybHpkSEpoZEdsdmJrNWhiV1UrU0U5VVJVd2dSRTlPSUV4UFRFOGdURWxOU1ZSQlJFRThMMk5pWXpwU1pXZHBjM1J5WVhScGIyNU9ZVzFsUGcwS0lDQWdJQ0FnUEdOaVl6cERiMjF3WVc1NVNVUWdjMk5vWlcxbFNVUTlJamNpSUhOamFHVnRaVTVoYldVOUlqTXhJajQ0T1RJd01ESTBNamM4TDJOaVl6cERiMjF3WVc1NVNVUStEUW9nSUNBZ0lDQThZMkZqT2xSaGVGTmphR1Z0WlQ0TkNpQWdJQ0FnSUNBZ1BHTmlZenBKUkQ0d01Ud3ZZMkpqT2tsRVBnMEtJQ0FnSUNBZ0lDQThZMkpqT2s1aGJXVStTVlpCUEM5alltTTZUbUZ0WlQ0TkNpQWdJQ0FnSUR3dlkyRmpPbFJoZUZOamFHVnRaVDROQ2lBZ0lDQThMMk5oWXpwUVlYSjBlVlJoZUZOamFHVnRaVDROQ2lBZ1BDOWpZV002VW1WalpXbDJaWEpRWVhKMGVUNE5DaUFnUEdOaFl6cEViMk4xYldWdWRGSmxjM0J2Ym5ObFBnMEtJQ0FnSUR4allXTTZVbVZ6Y0c5dWMyVStEUW9nSUNBZ0lDQThZMkpqT2xKbGMzQnZibk5sUTI5a1pUNHdORHd2WTJKak9sSmxjM0J2Ym5ObFEyOWtaVDROQ2lBZ0lDQWdJRHhqWW1NNlJHVnpZM0pwY0hScGIyNCtSRzlqZFcxbGJuUnZJSEpsWTJoaGVtRmtieUJ3YjNJZ2JHRWdSRWxCVGp3dlkySmpPa1JsYzJOeWFYQjBhVzl1UGcwS0lDQWdJRHd2WTJGak9sSmxjM0J2Ym5ObFBnMEtJQ0FnSUR4allXTTZSRzlqZFcxbGJuUlNaV1psY21WdVkyVStEUW9nSUNBZ0lDQThZMkpqT2tsRVBrNUVVMDR4UEM5alltTTZTVVErRFFvZ0lDQWdJQ0E4WTJKak9sVlZTVVFnYzJOb1pXMWxUbUZ0WlQwaVExVkVVeTFUU0VFek9EUWlQak14TmpNM1pqSmlNRE0wWWprMk5EaG1NV1U1TnprMlkyUTVOMkU0WkRjNE1qWTFNek5rTkdKalkyUTNPV00zTTJZd056a3hZakkyWVdNd1lXTXlPVFF3WkRNM1pESXpaVFJoWWpWbE56QmxaVEU0TkRFeFlqUTBNalV4T0RjME9Ed3ZZMkpqT2xWVlNVUStEUW9nSUNBZ1BDOWpZV002Ukc5amRXMWxiblJTWldabGNtVnVZMlUrRFFvZ0lDQWdQR05oWXpwTWFXNWxVbVZ6Y0c5dWMyVStEUW9nSUNBZ0lDQThZMkZqT2t4cGJtVlNaV1psY21WdVkyVStEUW9nSUNBZ0lDQWdJRHhqWW1NNlRHbHVaVWxFUGpFOEwyTmlZenBNYVc1bFNVUStEUW9nSUNBZ0lDQThMMk5oWXpwTWFXNWxVbVZtWlhKbGJtTmxQZzBLSUNBZ0lDQWdQR05oWXpwU1pYTndiMjV6WlQ0TkNpQWdJQ0FnSUNBZ1BHTmlZenBTWlhOd2IyNXpaVU52WkdVK01EQXdNRHd2WTJKak9sSmxjM0J2Ym5ObFEyOWtaVDROQ2lBZ0lDQWdJQ0FnUEdOaVl6cEVaWE5qY21sd2RHbHZiajR3UEM5alltTTZSR1Z6WTNKcGNIUnBiMjQrRFFvZ0lDQWdJQ0E4TDJOaFl6cFNaWE53YjI1elpUNE5DaUFnSUNBOEwyTmhZenBNYVc1bFVtVnpjRzl1YzJVK0RRb2dJQ0FnUEdOaFl6cE1hVzVsVW1WemNHOXVjMlUrRFFvZ0lDQWdJQ0E4WTJGak9reHBibVZTWldabGNtVnVZMlUrRFFvZ0lDQWdJQ0FnSUR4alltTTZUR2x1WlVsRVBqSThMMk5pWXpwTWFXNWxTVVErRFFvZ0lDQWdJQ0E4TDJOaFl6cE1hVzVsVW1WbVpYSmxibU5sUGcwS0lDQWdJQ0FnUEdOaFl6cFNaWE53YjI1elpUNE5DaUFnSUNBZ0lDQWdQR05pWXpwU1pYTndiMjV6WlVOdlpHVStUbE5CVlRBMFBDOWpZbU02VW1WemNHOXVjMlZEYjJSbFBnMEtJQ0FnSUNBZ0lDQThZMkpqT2tSbGMyTnlhWEIwYVc5dVBrSmhjMlVnU1cxd2IyNXBZbXhsSUdWeklHUnBjM1JwYm5SdklHRWdiR0VnYzNWdFlTQmtaU0JzYjNNZ2RtRnNiM0psY3lCa1pTQnNZWE1nWW1GelpYTWdhVzF3YjI1cFlteGxjeUJrWlNCMGIyUmhjeUJzdzYxdVpXRnpJR1JsSUdSbGRHRnNiR1V1UEM5alltTTZSR1Z6WTNKcGNIUnBiMjQrRFFvZ0lDQWdJQ0E4TDJOaFl6cFNaWE53YjI1elpUNE5DaUFnSUNBOEwyTmhZenBNYVc1bFVtVnpjRzl1YzJVK0RRb2dJQ0FnUEdOaFl6cE1hVzVsVW1WemNHOXVjMlUrRFFvZ0lDQWdJQ0E4WTJGak9reHBibVZTWldabGNtVnVZMlUrRFFvZ0lDQWdJQ0FnSUR4alltTTZUR2x1WlVsRVBqTThMMk5pWXpwTWFXNWxTVVErRFFvZ0lDQWdJQ0E4TDJOaFl6cE1hVzVsVW1WbVpYSmxibU5sUGcwS0lDQWdJQ0FnUEdOaFl6cFNaWE53YjI1elpUNE5DaUFnSUNBZ0lDQWdQR05pWXpwU1pYTndiMjV6WlVOdlpHVStUbE5DUnpBMFBDOWpZbU02VW1WemNHOXVjMlZEYjJSbFBnMEtJQ0FnSUNBZ0lDQThZMkpqT2tSbGMyTnlhWEIwYVc5dVBrTlZSRk1nWkdVZ1JGTWdjbVZtWlhKbGJtTnBZV1JoSUc1dklHVjRhWE4wWlR3dlkySmpPa1JsYzJOeWFYQjBhVzl1UGcwS0lDQWdJQ0FnUEM5allXTTZVbVZ6Y0c5dWMyVStEUW9nSUNBZ1BDOWpZV002VEdsdVpWSmxjM0J2Ym5ObFBnMEtJQ0E4TDJOaFl6cEViMk4xYldWdWRGSmxjM0J2Ym5ObFBnMEtQQzlCY0hCc2FXTmhkR2x2YmxKbGMzQnZibk5sUGc9PTwvYjpYbWxCYXNlNjRCeXRlcz48YjpYbWxCeXRlcyBpOm5pbD0idHJ1ZSIvPjxiOlhtbERvY3VtZW50S2V5PjMxNjM3ZjJiMDM0Yjk2NDhmMWU5Nzk2Y2Q5N2E4ZDc4MjY1MzNkNGJjY2Q3OWM3M2YwNzkxYjI2YWMwYWMyOTQwZDM3ZDIzZTRhYjVlNzBlZTE4NDExYjQ0MjUxODc0ODwvYjpYbWxEb2N1bWVudEtleT48YjpYbWxGaWxlTmFtZT5uZHMwODkyMDAyNDI3MDAwMjMwMDAwMDAxMDwvYjpYbWxGaWxlTmFtZT48L1NlbmRCaWxsU3luY1Jlc3VsdD48L1NlbmRCaWxsU3luY1Jlc3BvbnNlPjwvczpCb2R5PjwvczpFbnZlbG9wZT4=",
    "attacheddocument": "",
    "urlinvoicexml": "NDSNS-NDSN1.xml",
    "urlinvoicepdf": "NDSNS-NDSN1.pdf",
    "urlinvoiceattached": ".xml",
    "cuds": "31637f2b034b9648f1e9796cd97a8d7826533d4bccd79c73f0791b26ac0ac2940d37d23e4ab5e70ee18411b442518748",
    "uuid_dian": "31637f2b034b9648f1e9796cd97a8d7826533d4bccd79c73f0791b26ac0ac2940d37d23e4ab5e70ee18411b442518748",
    "QRStr": "NumFac: 1\nFecFac: 2022-09-01\nNitFac: 892002427\nDocAdq: 901249232\nValFac: 200.00\nValIva: 0.00\nValOtroIm: 0.00\nValTotal: 200.00\nCUFE: 31637f2b034b9648f1e9796cd97a8d7826533d4bccd79c73f0791b26ac0ac2940d37d23e4ab5e70ee18411b442518748\nhttps://catalogo-vpfe.dian.gov.co/document/searchqr?documentkey=31637f2b034b9648f1e9796cd97a8d7826533d4bccd79c73f0791b26ac0ac2940d37d23e4ab5e70ee18411b442518748",
    "certificate_days_left": 220}

  return enviado;

}

const creaJSONAnula = async(id, numDocu) => {
  data = {id, numDocu}
  try {
    const response = await fetch(`${rutaAPI}/infoNCDS.php`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json", // Y le decimos que los datos se enviaran como JSON
      },
      body:JSON.stringify(data),
    }); 
    const datos = await response.json ();
    return datos;
  } catch (error) {
    return error;
  }
}

async function mensajeAlerta(titulo, texto, tipo){
  swal({
    title:titulo,
    text:texto,
    type:tipo,
    confirmButtonText: "Aceptar",
  },
  function(){
    // window.location.href = "docSoporte";      
  })
}

async function enviaJSONActivo(infoJSON){
  limpiaVentanaImprimir();

  const infoDS = await infoAPI();
  let { token, rutaFE, documentoSoporte, prefijoDSNC, consecutivoNCDS } = infoDS[0]; 

  const recibeData = await enviaDatosJSON(infoJSON, token, rutaFE, 'sd-credit-note', 'POST')

  /* let { errors } = recibeData ;
  if(errors !== undefined){
    let { prefix } = errors ;
    if(prefix.length >0 ){
      let aviso = '';
      prefix.map((error) => {
        let { prefix } = error;
        aviso = aviso + error;
      })
      
      mensajeAlerta('Precaucion', aviso, 'error')
      return 
    }
  } */

  return recibeData;

}

const enviaDatosJSON = async(datos, token, rutaFE, pagina, tipo) => {
  try {
    const response = await fetch(`${rutaFE}${pagina}`, {
      method: tipo,
      headers: {
        'Content-Type': 'application/json',        
        'Accept': 'application/json',  
        'Authorization': `Bearer ${token}`
      },
      body:JSON.stringify(datos)
    });
    const dataRes = await response.json();

    return dataRes;
  } catch (error) {
    return error;
  }
}

async function limpiaVentanaImprimir(){
  $('#myModalImpresion').modal('show');
  $("#verImpresion").attr(
    "data",
    `data:application/pdf;base64,''`
  );
  document.querySelector("#tituloDocumento").innerHTML = `<i class="fa-regular fa-newspaper"></i> Procesando Informacion`;
  document.querySelector('.btnImprime').classList.add('oculto')
  document.querySelector("#mensajeImprime").innerHTML = `
  <div class="col-lg-8">
    <h1 style="margin-top:50px;margin-left: 50px">
      <p style="font-weight: 800;font-size: 35px;margin-bottom:10px">Procesando Informacion</p>
      <small style="font-weight: 600">NO Interrumpa </small>
    </h1>
  </div>
  <div class="col-lg-4">
    <small>
      <i style="font-size:10em;margin-top:50px;color:#BBB0B0; " class="ion ion-ios-gear-outline fa-spin"></i>
    </small>
  </div>`

}

async function enviaDS(idDoc,dian,proveedor){
  const infoDS = await infoAPI();
  let { token, rutaFE, documentoSoporte, prefijoDS, consecutivoDS } = infoDS[0]; 

  if(documentoSoporte==0){
    swal({
      title:'Precaucion',
      text:'Modulo Documento Soporte NO Instalado',
      type: "error",
      confirmButtonText: "Aceptar",
    },
    function(){
      
    })
    return ;
  }

  $('#myModalImpresion').modal('show');
  $("#verImpresion").attr(
    "data",
    `data:application/pdf;base64,''`
  );

  document.querySelector("#tituloDocumento").innerHTML = `<i class="fa-regular fa-newspaper"></i> Procesando Informacion`;
  document.querySelector('.btnImprime').classList.add('oculto')
  document.querySelector("#mensajeImprime").innerHTML = `
  <div class="col-lg-8">
    <h1 style="margin-top:50px;margin-left: 50px">
      <p style="font-weight: 800;font-size: 35px;margin-bottom:10px">Procesando Informacion</p>
      <small style="font-weight: 600">NO Interrumpa </small>
    </h1>
  </div>
  <div class="col-lg-4">
    <small>
      <i style="font-size:10em;margin-top:50px;color:#BBB0B0; " class="ion ion-ios-gear-outline fa-spin"></i>
    </small>
  </div>`

  const dataDS = await traeDataDS(idDoc, proveedor);
  const recibeDS = await enviaDatosDS(dataDS, token, rutaFE )
  
  let {status, statusText } = recibeDS;
  if(status< 200 || status > 299){
    swal({
      title:'Precaucion',
      text:`${statusText}`,
      type: "error",
      confirmButtonText: "Aceptar",
    })
    return 
  }
  const recibe = await recibeDS.json();
    
  let recibe2 = {
    "message": "AttachedDocument #DS1 generada con éxito",
    "send_email_success": false,
    "send_email_date_time": false,
    "ResponseDian": {
        "Envelope": {
            "Header": {
                "Action": {
                    "_attributes": {
                        "mustUnderstand": "1"
                    },
                    "_value": "http://wcf.dian.colombia/IWcfDianCustomerServices/SendBillSyncResponse"
                },
                "Security": {
                    "_attributes": {
                        "mustUnderstand": "1"
                    },
                    "Timestamp": {
                        "_attributes": {
                            "Id": "_0"
                        },
                        "Created": "2022-07-05T15:16:38.656Z",
                        "Expires": "2022-07-05T15:21:38.656Z"
                    }
                }
            },
            "Body": {
                "SendBillSyncResponse": {
                    "SendBillSyncResult": {
                        "ErrorMessage": {
                            "string": "Regla: DSDS01, Rechazo: Tipo de documento no disponible para validación en el ambiente de producción en operación"
                        },
                        "IsValid": "false",
                        "StatusCode": "99",
                        "StatusDescription": "Validación contiene errores en campos mandatorios.",
                        "StatusMessage": "Documento con errores en campos mandatorios.",
                        "XmlBase64Bytes": "....",
                        "XmlBytes": {
                            "_attributes": {
                                "nil": "true"
                            }
                        },
                        "XmlDocumentKey": "288298ffe83832fdb9d434af5d6ad21dd9bced3541d1ab8da90a3b72eb212eb98de88d3893719b7b47c1c5e0751b3877",
                        "XmlFileName": "dse09012492320002200000001"
                    }
                }
            }
        }
    },
    "invoicexml": "......",
    "unsignedinvoicexml": "...",
    "reqfe": "...",
    "rptafe": "...",
    "attacheddocument": "",
    "urlinvoicexml": "DSS-DS1.xml",
    "urlinvoicepdf": "DSS-DS1.pdf",
    "urlinvoiceattached": ".xml",
    "cude": "288298ffe83832fdb9d434af5d6ad21dd9bced3541d1ab8da90a3b72eb212eb98de88d3893719b7b47c1c5e0751b3877",
    "QRStr": "NumFac: 1\nFecFac: 2020-10-06\nNitFac: 901249232\nDocAdq: 900166483\nValFac: 0.00\nValIva: 0.00\nValOtroIm: 0.00\nValTotal: 1000000.00\nCUFE: b3d063d98c773df5c42f14bc2ce20a24ef6c62fd81ccbd7f3672b9d116933125a05a5fe4046632ed310f473e24b8cf6a\nhttps://catalogo-vpfe.dian.gov.co/document/searchqr?documentkey=b3d063d98c773df5c42f14bc2ce20a24ef6c62fd81ccbd7f3672b9d116933125a05a5fe4046632ed310f473e24b8cf6a\n"
  };

  let { StatusCode, StatusDescription, StatusMessage, ErrorMessage, IsValid } = recibe2['ResponseDian']['Envelope']['Body']['SendBillSyncResponse']['SendBillSyncResult']; 

  if(IsValid !=='false'){
    swal({
      title:'Precaucion',
      text:`${ErrorMessage.string}`,
      type: "error",
      confirmButtonText: "Aceptar",
    },
    function(){
      
    })
    return ;
  }
  
  let { message, send_email_success, send_email_date_time, urlinvoicexml, urlinvoicepdf, cude, QRStr } = recibe2;
  let { Created } = recibe2['ResponseDian']['Envelope']['Header']['Security']['Timestamp'];

  ErrorMessage = JSON.stringify(ErrorMessage);

  datosFE = { 
    dataDS,
    prefijoDS,
    consecutivoDS,
    status,
    statusText,
    StatusCode,
    StatusDescription,
    StatusMessage,
    ErrorMessage,
    IsValid,
    message,
    send_email_success,
    send_email_date_time,
    urlinvoicexml,
    urlinvoicepdf,
    cude,
    QRStr,
    Created
  }

  const regID = await guardaDatosDS(datosFE)

  let {id, error } = regID;

  if(id == 0){
    swal({
      title:'Precaucion',
      text:`${error}`,
      type: "error",
      confirmButtonText: "Aceptar",
    },
    function(){
      
    })
    return 
  }
  
  const increm = await incrementaConsec(consecutivoDS+1) ;
  const actualizaEstado = await actualizaEstadoDS(idDoc, consecutivoDS) ;
  const imprime = await generaDocumentoDS(idDoc, consecutivoDS, QRStr, recibe2);
  
  if(actualizaEstado !==1){
    swal({
      title:'Atencion',
      text:`Documento Soporte NO Procesado, Intente Mas Tarde`,
      type: "success",
      confirmButtonText: "Aceptar",
    },
    function(){
      window.location.href = "docSoporte";
    })
  }
  swal({
    title:'Atencion',
    text:`Documento Soporte Nro ${consecutivoDS} Procesado Con Exito`,
    type: "success",
    confirmButtonText: "Aceptar",
  },
  function(){
    window.location.href = "docSoporte";
  })
}

async function muestraPDFDoc(imprime) {
  document.querySelector("#tituloDocumento").innerHTML = `<i class="fa-regular fa-newspaper"></i> Imprime Documento Soporte`;
  document.querySelector("#mensajeImprime").innerHTML = ``
  document.querySelector('.btnImprime').classList.remove('oculto')  
  $("#verImpresion").attr(
    "data",
    `data:application/pdf;base64,${imprime}`
  );
}

const anulaDocumentoSoporte = async(id, numDocu, motivo, rechazo) => {
  data = {
    id,
    numDocu,
    motivo,
    rechazo,
    usuario_id,
  }
  try {
    const response = await fetch(`${rutaAPI}/anulaDS.php`, {
      method: "PUT",
      body:JSON.stringify(data),
      headers: {
        'Content-Type': 'application/json',        
        'Accept': 'application/json',  
      },
    });
    const datos = response.text();  
    return datos;
  } catch (error) {
    return error;
  }
}

const generaDocumentoDS = async(idDoc, consecutivoDS, QRStr, recibe2) => {
  data = {
    idDoc,
    consecutivoDS,
    QRStr,
    usuario,
    recibe2,
  }
  try {
    const response = await fetch(`${rutaIMP}/generaDS.php`, {
      method: "POST",
      body:JSON.stringify(data),
      headers: {
        'Content-Type': 'application/json',        
        'Accept': 'application/json',  
      },
    });
    const datos = response.text();  
    return datos;
  } catch (error) {
    return error;
  }
}

const actualizaEstadoDS = async(idDoc, conse) => {
  data = {
    idDoc,
    conse,
  }
  try {
    const response = await fetch(`${rutaAPI}/documentos`, {
      method: "PUT",
      body:JSON.stringify(data),
      headers: {
        'Content-Type': 'application/json',        
        'Accept': 'application/json',  
      },
    });
    const datos = response.json();  
    return datos;
  } catch (error) {
    return error;
  }
}

const incrementaConsec = async(numDS) => {
  data = {
    numDS
  }
  try {
    const response = await fetch(`${rutaAPI}/datosDS`, {
      method: "PUT",
      body:JSON.stringify(data),
      headers: {
        'Content-Type': 'application/json',        
        'Accept': 'application/json',  
      },
    });
    const datos = response.json();  
    return datos;
  } catch (error) {
    return error;
  }
}

const guardaDatosDS = async(datosFE) => {
  try {
    const response = await fetch(`${rutaAPI}/datosDS`, {
      method: "POST",
      body:JSON.stringify(datosFE),
      headers: {
        'Content-Type': 'application/json',        
        'Accept': 'application/json',  
      },
    });
    const datos = response.json();  
    return datos;
  } catch (error) {
    return error;
  }
}

const enviaDatosDS = async(dataDS, token, rutaFE) => {
  try {
    const response = await fetch(`${rutaFE}plan/infoplanuser`, {
      method: "GET",
      headers: {
        'Content-Type': 'application/json',        
        'Accept': 'application/json',  
        'Authorization': `Bearer ${token}`
      },
    });
    const datos = await response;
  
    return datos;
  } catch (error) {
    return error;
  }
}

const enviaDatosDSACt = async(dataDS, token, rutaFE) => {
  try {
    const response = await fetch(`${rutaFE}support-document`, {
      method: "POST",
      headers: {
        'Content-Type': 'application/json',        
        'Accept': 'application/json',  
        'Authorization': `Bearer ${token}`
      },
    });
    const datos = await response.json();
    // const datos = await console.log(datos);

    console.log(response)
    console.log(response.status)
    console.log(response.statusText)

    // const datos = await console.log(datos);
    console.log(datos);
    
    return datos;
  } catch (error) {
    console.log(error)
    return error;
  }
}

const infoAPI = async() => {
  try {
    const response = await fetch(`${rutaAPI}/infoAPI.php`, {
      method: "GET",
      headers: {
        "Content-Type": "application/json", // Y le decimos que los datos se enviaran como JSON
      },
    }); 
    const datos = await response.json ();
    return datos;
  } catch (error) {
    return error;
  }
}

const traeDataDS = async(id, proveedor) => {
  try {
    data = {id, proveedor}

    const response = await fetch(`${rutaAPI}/infoDS.php`, {
      method: "POST",
      body: JSON.stringify(data), // data puede ser string o un objeto
      headers: {
        "Content-Type": "application/json", // Y le decimos que los datos se enviaran como JSON
      },
    });
    const datos = await response.text();
    return datos;
  } catch (error) {
    return error;
  }
}

const generaJsonDS = async() => {
  try {
    data = {id, usuario, proveedor}
    const response = await fetch(`${rutaAPI}/generaJSON.php`, {
      method: "POST",
      body: JSON.stringify(data), // data puede ser string o un objeto
      headers: {
        "Content-Type": "application/json", // Y le decimos que los datos se enviaran como JSON
      },
    });
    const datos = await response.text();
    return datos;
  } catch (error) {
    return error;
  }
}

async function imprimeDS(id, dian, proveedor, numDocu, prefijo){
  if(dian==1){
    archivo = `documentoSoporte_${prefijo}-${numDocu.toString().padStart(5,'0')}.pdf`
    $('#myModalImpresion').modal('show');
    document.querySelector("#tituloDocumento").innerHTML = `<span class="material-symbols-outlined">picture_as_pdf</span> Documento Soporte `
    $("#verImpresion").attr(
      "data",`impresos/${archivo}`
    );

  }else{
    const impresion = await generaDS(id, proveedor);
    $('#myModalImpresion').modal('show');
    document.querySelector("#tituloDocumento").innerHTML = `<span class="material-symbols-outlined">picture_as_pdf</span> Documento Soporte SIN PROCESAR`
    $("#verImpresion").attr(
      "data",
      `data:application/pdf;base64,${$.trim(impresion)}`
    ); 
  }
}

const generaDS = async (id, proveedor) => {
  try {
    data = {id, usuario, proveedor}
    const response = await fetch(`${rutaIMP}/imprimeDS.php`, {
      method: "POST",
      body: JSON.stringify(data), // data puede ser string o un objeto
      headers: {
        "Content-Type": "application/json", // Y le decimos que los datos se enviaran como JSON
      },
    });
    const datos = await response.text();
    return datos;
  } catch (error) {
    return error;
  }
};

async function btnSubmitDocumento(e) {
  alert('Paso submit')
  e.preventDefault();
  if (e.submitter.classList.contains('guarda')) {
    await guardaDocumento();
  } else if (e.submitter.classList.contains('cancela')) {
    await cancelaDocumento();
  } else if (e.submitter.classList.contains('elimina_articulo')) {
    var button = e.submitter;
    let idArt = button.dataset.id;
    await eliminaProductoDoc(idArt)
  } else if (e.submitter.classList.contains('imprimeDS')) {
  } else if (e.submitter.classList.contains('imprimeNC')) {
  } else if (e.submitter.classList.contains('enviaDS')) {
  // } else if (e.submitter.classList.contains('anulaDS')) {
  }
}

async function cancelaDocumento() {
  swal({
    title: "Atencion !",
    text: "Esta Seguro de Cancelar el Documento ?",
    type: "warning",
    showCancelButton: true,
    cancelButtonClass: "#DD6B55",
    cancelButtonText: "No",
    confirmButtonClass: "btn-info",
    confirmButtonText: "Si",
    closeOnConfirm: false,
  },
    function () {
      borraStorage();
      window.location.href = "docSoporte";
    })
}

async function guardaItemDoc(e) {
  e.preventDefault();

  const data = Object.fromEntries(
    new FormData(e.target)
  )

  let txtComp = $("#itemcompra option:selected").text();
  let txtUnid = $("#unidad option:selected").text();
  let txtIMpt = $("#imptos option:selected").text();

  let datos = { ...data, txtComp, txtUnid, txtIMpt };

  compras.push(datos);

  itemCompra = document.querySelector('#dataRegistraItem');
  localStorage.setItem("documentoSoporte", JSON.stringify(compras));

  $('#myModalAdicionaItem').modal('hide');

  productosCompra = document.querySelector('#dataDocSoporte  tbody')
  limpia = await limpiaProductosDocumentoHMLT();
  const mostrar = await muestraProductosDocumentoHTML(compras)

}

async function limpiaProductosDocumentoHMLT() {
  while (productosCompra.firstChild) {
    productosCompra.removeChild(productosCompra.firstChild);
  }
}

async function muestraProductosDocumentoHTML(compras) {
  let totDocu = 0;
  compras.map((compra) => {
    let { itemcompra, txtComp, txtUnid, precio, cantidad, total } = compra;
    totDocu = totDocu + parseFloat(total);
    const row = document.createElement("tr");
    let aviso = '';

    row.innerHTML += `
        <td>${txtComp}</td>        
        <td>${txtUnid}</td>
        <td class="derecha">${number_format(precio, 2)}</td>
        <td class="derecha">${number_format(cantidad, 0)}</td>
        <td class="derecha">${number_format(total, 2)}</td>        
        <td class="centro">
          <button 
          type="submit"
          data-id='${itemcompra}' 
          class='btn btn-danger btn-xs elimina_articulo' ><i class='glyphicon glyphicon-trash '></i></button>
        </td>`;
    productosCompra.appendChild(row);
  })
  document.querySelector('#totalDocumento').value = number_format(totDocu, 2)
}

async function muestraProductosDocumento(datos) {
  dataCompra = document.querySelector('#dataDocSoporte tbody');
  combo = document.querySelector('#itemcompra');
  let option = "<option value=''>Seleccione el Codigo";
  datos.forEach((dato) => {
    const { id_cargo, descripcion_cargo } = dato;
    option += `
    <option value="${id_cargo}">${descripcion_cargo}</option>
    `;
  });
  combo.innerHTML = option;
}

async function guardaProveedor(e) {
  e.preventDefault();

  const data = Object.fromEntries(
    new FormData(e.target)
  )

  let dataObj = {}

  let { empresa, apellido1, nombre1, apellido2, nombre2 } = data;

  if (empresa == '' && (apellido1 == '' || nombre1 == '')) {
    swal({
      title: 'Precaucion',
      text: 'Sin Datos Definidos para el proveedor',
      type: "error",
      confirmButtonText: "Aceptar",
    })
    return;
  }

  if (empresa == '') {
    empresa = `${apellido1} ${apellido2} ${nombre1} ${nombre2}`
    dataObj = { ...data, empresa, };
  } else {
    dataObj = { ...data, empresa, };
  }

  let datos = { ...dataObj, usuario, };
  respuesta = await ingresaProveedor(datos);
  let { id, error } = respuesta;

  if (id != "0") {
    swal({
      title: "Atencion!",
      text: "Proveedor Creado Con Exito",
      type: "success",
      confirmButtonText: "Aceptar",
      closeOnConfirm: true,
    },
      function () {
        window.location.href = "proveedores";
      })
  } else {
    mostrarAlerta(error, "mensaje");
  }
}

async function guardaProducto(e) {
  e.preventDefault();


  const data = Object.fromEntries(
    new FormData(e.target)
  )

  let datos = { ...data, usuario, };
  respuesta = await ingresaProducto(datos);
  let { id, error } = respuesta;

  if (id != "0") {
    swal({
      title: "Atencion!",
      text: "Compras / Servicios Creado Con Exito",
      type: "success",
      confirmButtonText: "Aceptar",
      closeOnConfirm: true,
    },
      async function () {
        if (docSopo == 0) {
          window.location.href = "productos";
        } else {
          $('#myModalAdicionaItem').modal('hide');
          const datos = await obtenerProductos();
          const com = await muestraProductosCombo(datos);
        }
      })
  } else {
    mostrarAlerta(error, "mensaje");
  }
}

async function muestraProductosCombo(datos) {
  combo = document.querySelector('#itemcompra');
  let option = "<option value=''>Seleccione el Codigo";
  datos.forEach((dato) => {
    const { id_cargo, descripcion_cargo } = dato;
    option += `
    <option value="${id_cargo}">${descripcion_cargo}</option>
    `;
  });
  combo.innerHTML = option;
}

async function guardaFormaPago(e) {
  e.preventDefault();

  const data = Object.fromEntries(
    new FormData(e.target)
  )

  let datos = { ...data, usuario, };
  respuesta = await ingresaPago(datos);
  let { id, error } = respuesta;

  if (id != "0") {
    swal({
      title: "Atencion!",
      text: "Forma de Pago Creado Con Exito",
      type: "success",
      confirmButtonText: "Aceptar",
      closeOnConfirm: true,
    },
      function () {
        window.location.href = "formasPago";
      })
  } else {
    mostrarAlerta(error, "mensaje");
  }
}

const ingresaProducto = async (producto) => {
  try {
    const response = await fetch(`${rutaAPI}/productos`, {
      method: "POST",
      body: JSON.stringify(producto), // data puede ser string o un objeto
      headers: {
        "Content-Type": "application/json", // Y le decimos que los datos se enviaran como JSON
      },
    });
    const datos = await response.json();
    return datos;
  } catch (error) {
    return error;
  }
};

const ingresaPago = async (pagos) => {
  try {
    const response = await fetch(`${rutaAPI}/formasPago.php`, {
      method: "POST",
      body: JSON.stringify(pagos), // data puede ser string o un objeto
      headers: {
        "Content-Type": "application/json", // Y le decimos que los datos se enviaran como JSON
      },
    });
    const datos = await response.json();
    return datos;
  } catch (error) {
    return error;
  }
};

const ingresaProveedor = async (proveedor) => {
  try {
    const response = await fetch(`${rutaAPI}/proveedores`, {
      method: "POST",
      body: JSON.stringify(proveedor), // data puede ser string o un objeto
      headers: {
        "Content-Type": "application/json", // Y le decimos que los datos se enviaran como JSON
      },
    });
    const datos = await response.json();
    return datos;
  } catch (error) {
    return error;
  }
};

const obtenerProductos = async () => {
  try {
    const resultado = await fetch(`${rutaAPI}/productos.php`);
    const productos = await resultado.json();
    return productos;
  } catch (error) {
    console.log(error);
  }
};

async function infoProducto(item) {
  const datos = await traeDetalleProducto(item);
  muestraDetalleProducto(datos)
}

const traeDetalleProducto = async (item) => {
  try {
    const response = await fetch(`${rutaAPI}/productos?item=${item}`);
    const producto = await response.json();
    return producto;
  } catch (error) {
    console.log(error);
  }
};

async function muestraDetalleProducto(datos) {
  let { unidad, id_impto, precio } = datos[0];

  document.querySelector('#unidad').value = unidad;
  document.querySelector('#precio').value = precio;
  document.querySelector('#cantidad').value = 1;
  document.querySelector('#total').value = precio * 1;
  document.querySelector('#imptos').value = id_impto;
}

function calculaTotal() {
  unit = document.querySelector('#precio').value
  cant = document.querySelector('#cantidad').value
  document.querySelector('#total').value = unit * cant
}

function mostrarAlerta(mensaje, campo) {
  const alerta = document.querySelector("#" + campo);
  if ((alerta.classList.contains = "oculto")) {
    alerta.classList.remove("oculto");
    alerta.innerHTML = `
        <h3 class="font-bold tc">¡ Error !<br>        
        <span class="block sm:inline">${mensaje}</span>
        </h3>
    `;
    setTimeout(() => {
      alerta.classList.add("oculto");
    }, 3000);
  }
}

async function validaCampos(obj) {
  return !Object.values(obj).every((element) => element !== null);
}

function sumaFecha() {
  let fecha = document.querySelector("#fecha").value;
  let plazo = parseInt(document.querySelector("#plazo").value);

  var date = fecha.split("-");
  hoy = new Date(date[0], date[1], date[2]);

  calculado = new Date();
  dateResul = hoy.getDate() + plazo;
  calculado.setDate(dateResul);
  anio = calculado.getFullYear();
  mes = (calculado.getMonth() + 1).toString().padStart(2, '0');
  dia = calculado.getDate().toString().padStart(2, '0');

  let vence = anio + "-" + mes + "-" + dia;

  document.querySelector("#vence").value = vence

}

function asignaLocalStorage(code, valor) {
  localStorage.setItem(code, valor);
}

async function nuevoDocumento() {
  let fecha = new Date;
  anio = fecha.getFullYear();
  mes = (fecha.getMonth() + 1).toString().padStart(2, '0');
  dia = fecha.getDate().toString().padStart(2, '0');
  hoy = anio + "-" + mes + "-" + dia;

  await traeStorage()

  document.querySelector('#documento').value = docu ? docu : '';
  document.querySelector('#tipoOperacion').value = tipo ? tipo : '';
  document.querySelector('#proveedor').value = prov ? prov : '';
  document.querySelector('#fecha').value = fech ? fech : hoy;
  document.querySelector('#plazo').value = plaz ? plaz : 0;
  document.querySelector('#vence').value = venc ? venc : hoy;
  document.querySelector('#comentarios').value = come ? come : '';
  document.querySelector('#formaPago').value = form ? form : '';

  let documentoSoporte = JSON.parse(localStorage.getItem("documentoSoporte"));

  if (documentoSoporte == null) {
    compras = [];
  } else {
    compras = documentoSoporte;
    productosCompra = document.querySelector('#dataDocSoporte  tbody')
    limpia = await limpiaProductosDocumentoHMLT();
    const mostrar = await muestraProductosDocumentoHTML(compras)
  }
}

async function guardaDocumento() {

  await traeStorage()

  infoDoc = { docu, tipo, prov, fech, plaz, venc, form, usuario_id };

  const regis = await validaCampos(infoDoc);

  if (regis) {
    mostrarAlerta('Datos del Proveedor Incompletos', "mensaje");
    return;
  }

  let documentoSoporte = JSON.parse(localStorage.getItem("documentoSoporte"));

  if (documentoSoporte == null || documentoSoporte.length == 0) {
    swal({
      title: 'Precaucion',
      text: 'Sin Compras / Servicios Asignados a este Documento',
      confirmButtonText: "Aceptar",
      type: "warning",
      closeOnConfirm: true,
    }, function () {
    })
    return 
  }

  datosDoc = { ...documentoSoporte, docu, tipo, prov, fech, plaz, venc, form, usuario_id, come }

  let encabezado = { ...infoDoc, come, };
  respuesta = await ingresaEncabezadoDocumento(encabezado);
  let { id, error } = respuesta
  if (id == 0) {
    mostrarAlerta(error, "mensaje");
    return 0
  }

  compras = { ...documentoSoporte }

  documentoSoporte.map((documento) => {
    const regis = ingresaDetalleDocumento(documento, id);
  })

  swal({
    title: 'Atencion',
    text: 'Documento Soporte Almacenado con Exito',
    type: "success",
    confirmButtonText: "Aceptar",
  },
    function () {
      borraStorage();
      window.location.href = "docSoporte";
    })
}

async function eliminaProductoDoc(item) {
  swal({
    title: "Atencion !",
    text: "Esta Seguro de Eliminar la Compra / Servicio Actual ?",
    type: "warning",
    showCancelButton: true,
    cancelButtonClass: "#DD6B55",
    cancelButtonText: "No",
    confirmButtonClass: "btn-info",
    confirmButtonText: "Si",
    closeOnConfirm: true,
  },
    async function () {
      console.log(compras)
      console.log(item)
      compras = compras.filter(compra => Number(compra.itemcompra) !== item);
      console.log(compras)
      limpia = await limpiaProductosDocumentoHMLT();
      const mostrar = await muestraProductosDocumentoHTML(compras)
      localStorage.setItem("documentoSoporte", JSON.stringify(compras));
    })

  // console.log(compras);
  // eliminarProductoDoc(item)
}

async function traeStorage() {
  docu = localStorage.getItem("documento");
  tipo = localStorage.getItem("tipoOperacion");
  prov = localStorage.getItem("proveedor");
  fech = localStorage.getItem("fecha");
  plaz = localStorage.getItem("plazo");
  venc = localStorage.getItem("vence");
  form = localStorage.getItem("formaPago");
  come = localStorage.getItem("comentarios");
}

async function borraStorage() {
  localStorage.removeItem("documento");
  localStorage.removeItem("tipoOperacion");
  localStorage.removeItem("proveedor");
  localStorage.removeItem("fecha");
  localStorage.removeItem("plazo");
  localStorage.removeItem("vence");
  localStorage.removeItem("formaPago");
  localStorage.removeItem("comentarios");
  localStorage.removeItem("documentoSoporte");
}

const ingresaEncabezadoDocumento = async (encabezado) => {
  try {
    const response = await fetch(`${rutaAPI}/documentos`, {
      method: "POST",
      body: JSON.stringify(encabezado), // data puede ser string o un objeto
      headers: {
        "Content-Type": "application/json", // Y le decimos que los datos se enviaran como JSON
      },
    });
    const datos = await response.json();
    return datos;
  } catch (error) {
    return error;
  }
};

const ingresaDetalleDocumento = async (compra, idDoc) => {
  dataObj = { ...compra, idDoc }
  try {
    const response = await fetch(`${rutaAPI}/detalleDocumento`, {
      method: "POST",
      body: JSON.stringify(dataObj), // data puede ser string o un objeto
      headers: {
        "Content-Type": "application/json", // Y le decimos que los datos se enviaran como JSON
      },
    });
    const datos = await response.json();
    return datos;
  } catch (error) {
    return error;
  }
};